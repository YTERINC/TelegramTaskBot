package ru.yterinc.TelegramTaskBot.services;

import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.yterinc.TelegramTaskBot.config.BotConfig;
import ru.yterinc.TelegramTaskBot.models.Task;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@Component
public class TelegramBot extends TelegramLongPollingBot {
    private final TaskService taskService;
    private final Map<Long, String> userStates = new HashMap<>();
    private final Map<Long, Task> tempTasks = new ConcurrentHashMap<>();


    final BotConfig config;

    public TelegramBot(TaskService taskService, BotConfig config) {
        super(config.getToken());
        this.taskService = taskService;
        this.config = config;
        List<BotCommand> listOfCommands = new ArrayList<>();
        listOfCommands.add(new BotCommand("/start", "–ü–æ–º–æ—â—å"));
        listOfCommands.add(new BotCommand("/add", "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"));
        listOfCommands.add(new BotCommand("/list", "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"));
        try {
            this.execute(new SetMyCommands(listOfCommands, new BotCommandScopeDefault(), null));
        } catch (TelegramApiException e) {
        }
    }

    @Override
    public String getBotUsername() {
        return config.getBotName();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasCallbackQuery()) {
            handleCallback(update.getCallbackQuery());
            return;
        }
        if (update.hasMessage() && update.getMessage().hasText()) {
            Message message = update.getMessage();
            Long chatId = message.getChatId();
            String messageText = message.getText();
            try {
                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (userStates.containsKey(chatId)) {
                    handleUserState(chatId, messageText);
                    return;
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
                handleCommand(chatId, messageText);
            } catch (Exception e) {
                sendMessage(chatId, "–û—à–∏–±–∫–∞: " + e.getMessage());
            }

        }
    }

    private void handleCommand(Long chatId, String text) {
        if (text.startsWith("/delete")) {
            handleDeleteCommand(chatId, text);
            return;
        }
        switch (text) {
            case "/start":
                sendStartMessage(chatId);
                break;
            case "/add":
                startAddTaskProcess(chatId);
                break;
            case "/list":
                listTasks(chatId);
                break;
            default:
                sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
        }
    }

    private void handleCallback(CallbackQuery callbackQuery) {
        Long chatId = callbackQuery.getMessage().getChatId();
        String data = callbackQuery.getData();

        if (data.startsWith("delete_")) {
            long taskId = Long.parseLong(data.split("_")[1]);
            deleteTaskWithConfirmation(chatId, taskId, callbackQuery.getMessage().getMessageId());
        }
    }

    private void handleDeleteCommand(Long chatId, String commandText) {
        try {
            String[] parts = commandText.split(" ");
            if (parts.length < 2) {
                sendMessage(chatId, "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ID –∑–∞–¥–∞—á–∏. –§–æ—Ä–º–∞—Ç: /delete [ID]");
                return;
            }

            long taskId = Long.parseLong(parts[1]);
            boolean isDeleted = taskService.deleteTaskByIdAndUserId(taskId, chatId);

            if (isDeleted) {
                sendMessage(chatId, "‚úÖ –ó–∞–¥–∞—á–∞ —Å ID " + taskId + " —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞");
            } else {
                sendMessage(chatId, "‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è");
            }
        } catch (NumberFormatException e) {
            sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä");
        } catch (Exception e) {
            sendMessage(chatId, "üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: " + e.getMessage());
        }
    }


    private void handleUserState(Long chatId, String text) {
        String state = userStates.get(chatId);

        if (text.startsWith("/")) {
            cancelOperation(chatId);
//            handleCommand(chatId, text);
            sendMessage(chatId, "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞");
            return;
        }

        switch (state) {
            case "AWAITING_TITLE":
                handleTitleInput(chatId, text);
                break;
            case "AWAITING_DESCRIPTION":
                handleDescriptionInput(chatId, text);
                break;
        }
    }

    private void sendStartMessage(Long chatId) {
        String welcomeText = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                "/add - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n" +
                "/list - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n" +
                "/delete - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É";
        sendMessage(chatId, welcomeText);
    }

    private void startAddTaskProcess(Long chatId) {
        userStates.put(chatId, "AWAITING_TITLE");
        tempTasks.put(chatId, new Task());
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:");
    }

    private void handleTitleInput(Long chatId, String title) {
        Task task = tempTasks.get(chatId);
        task.setTitle(title);
        userStates.put(chatId, "AWAITING_DESCRIPTION");
        sendMessage(chatId, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:");
    }

    private void handleDescriptionInput(Long chatId, String description) {
        Task task = tempTasks.get(chatId);
        task.setDescription(description);
        task.setUserId(chatId);
        task.setCompleted(false);

        taskService.addTask(task);

        sendMessage(chatId, "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!");
        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        cancelOperation(chatId);
    }

    private void cancelOperation(Long chatId) {
        userStates.remove(chatId);
        tempTasks.remove(chatId);
    }

    //    private void listTasks(Long chatId) {
//        try {
//            // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//            List<Task> userTasks = taskService.findAll(chatId);
//
//            if (userTasks.isEmpty()) {
//                sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.");
//                return;
//            }
//
//            // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
//            StringBuilder response = new StringBuilder("üìù –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n");
//            for (Task task : userTasks) {
//                response.append(String.format(
//                        "üÜî ID: %d\nüìå –ù–∞–∑–≤–∞–Ω–∏–µ: %s\nüìÑ –û–ø–∏—Å–∞–Ω–∏–µ: %s\n‚úÖ –°—Ç–∞—Ç—É—Å: %s\n\n",
//                        task.getId(),
//                        task.getTitle(),
//                        task.getDescription(),
//                        task.isCompleted() ? "–ó–∞–≤–µ—Ä—à–µ–Ω–æ" : "–ê–∫—Ç–∏–≤–Ω–æ"
//                ));
//            }
//
//            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é
//            response.append("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delete [ID] –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è");
//
//            sendMessage(chatId, response.toString());
//
//        } catch (Exception e) {
//            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: " + e.getMessage());
//            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
//            e.printStackTrace();
//        }
//    }
    private void listTasks(Long chatId) {
        try {
            List<Task> userTasks = taskService.findAll(chatId);

            if (userTasks.isEmpty()) {
                sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.");
                return;
            }



            for (Task task : userTasks) {
                // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –∑–∞–¥–∞—á–∏ –∏ –∫–Ω–æ–ø–∫–æ–π
                InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> rows = new ArrayList<>();
                List<InlineKeyboardButton> row = new ArrayList<>();

                // –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
                String taskText = String.format(
                        "üÜî ID: %d\nüìå –ù–∞–∑–≤–∞–Ω–∏–µ: %s\nüìÑ –û–ø–∏—Å–∞–Ω–∏–µ: %s\n‚úÖ –°—Ç–∞—Ç—É—Å: %s\n\n",
                        task.getId(),
                        task.getTitle(),
                        task.getDescription(),
                        task.isCompleted() ? "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ" : "üîÑ –ê–∫—Ç–∏–≤–Ω–æ"
                );

                // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
                InlineKeyboardButton deleteButton = new InlineKeyboardButton();
                deleteButton.setText("‚ùå –£–¥–∞–ª–∏—Ç—å");
                deleteButton.setCallbackData("delete_" + task.getId());

                row.add(deleteButton);
                rows.add(row);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–æ–π
                SendMessage message = new SendMessage();
                message.setChatId(chatId.toString());
                message.setText(taskText);

                keyboardMarkup.setKeyboard(rows);
                message.setReplyMarkup(keyboardMarkup);

                try {
                    execute(message);
                } catch (TelegramApiException e) {
                    e.printStackTrace();
                }
            }

        } catch (Exception e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private void deleteTaskWithConfirmation(Long chatId, Long taskId, Integer messageId) {
        try {
            boolean isDeleted = taskService.deleteTaskByIdAndUserId(taskId, chatId);

            if (isDeleted) {
                // –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π
                DeleteMessage deleteMessage = new DeleteMessage();
                deleteMessage.setChatId(chatId.toString());
                deleteMessage.setMessageId(messageId);
                execute(deleteMessage);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                sendMessage(chatId, "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ ‚úÖ");
            } else {
                sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
            }
        } catch (Exception e) {
            sendMessage(chatId, "üö´ –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private void sendMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }


}
